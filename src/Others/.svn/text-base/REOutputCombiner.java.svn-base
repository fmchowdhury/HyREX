package Others;

import java.io.IOException;
import java.util.ArrayList;

import Utility.*;


public class REOutputCombiner {

	public static void main ( String args[]) throws Exception{
		
		String[] predFileNames = new String[] {
				"/media/Study/workspace/ModifiedTK/only_medt_aimed/sl_icr_aimed/best.base.stat.in",
				"/media/Study/workspace/ModifiedTK/only_medt_aimed/dt_icr_aimed/best.base.stat.in"				
		};
		
		String[] entPairFileNames = new String[] {
				"/media/Study/workspace/ModifiedTK/only_medt_aimed/sl_icr_aimed/entPairFileName_TK",
				"/media/Study/workspace/ModifiedTK/only_medt_aimed/dt_icr_aimed/entPairFileName_TK"				
		};
		
		new REOutputCombiner().combinePositivePredictions( predFileNames, 
				"/media/Study/workspace/ModifiedTK/only_medt_aimed/sl_icr_aimed/allEntPair", 
				entPairFileNames);
	}
	
	
	/**
	 * 
	 * @param predictionFile
	 * @param allEntPairFile
	 * @param testEntPairFile
	 * @throws IOException 
	 */
	public void combinePositivePredictions ( String[] predictionFiles, 
			String allEntPairFile, String[] testEntPairFiles ) throws IOException{
		
		ArrayList<String> allLines = FileUtility.readNonEmptyFileLines(allEntPairFile);
		String[][] allEntPairs = new String[allLines.size()][];
		
		for ( int i=0; i<allLines.size(); i++ ) {
			allEntPairs[i] = (allLines.get(i).trim() + " 0 2").split("\\s+");
		}
		
		for ( int f=0; f<predictionFiles.length; f++ ) {
			ArrayList<String> tempLines = FileUtility.readNonEmptyFileLines(testEntPairFiles[f]);
			ArrayList<String> tempLinesPred = FileUtility.readNonEmptyFileLines(predictionFiles[f]);
			String[][] testEntPairs = new String[allLines.size()][];
			
			for ( int i=0; i<tempLines.size(); i++ ) {
				
				if ( tempLines.get(i).trim().length() > 0 ) {
					String[] temp = tempLines.get(i).trim().split("\\s+");
					testEntPairs[i] = new String[4];
					testEntPairs[i][0] = temp[0];
					testEntPairs[i][1] = temp[1];
					temp = tempLinesPred.get(i).trim().split("\\s+");
					testEntPairs[i][2] = temp[2];
					testEntPairs[i][3] = temp[0];
				}
				else
					testEntPairs[i] = null;
			}
			
			for ( int i=0; i<allLines.size(); i++ ) {
				
				boolean isFound = false;
				// search the pairs for which predictions have been made
				for ( int k=0; !isFound && k<testEntPairs.length; k++ ) {
					System.out.println(f + " " + i + " " + k);
					
					if ( i==4 && k==4319 )
						f = 0 + f;
					
					if ( testEntPairs[k] == null )
						break;
					
					if ( (testEntPairs[k][0].equals(allEntPairs[i][0])
							&& testEntPairs[k][1].equals(allEntPairs[i][1]) )
						|| (testEntPairs[k][1].equals(allEntPairs[i][0])
								&& testEntPairs[k][0].equals(allEntPairs[i][1]) )	
					) {
							
							allEntPairs[i][3] = testEntPairs[k][3];
							isFound = true;
							
							if ( testEntPairs[k][2].equals("1") && !allEntPairs[i][2].equals("1") ) {
								allEntPairs[i][2] = testEntPairs[k][2];
							}
					}
				}				
			}
		}
		
		
		StringBuilder sb = new StringBuilder();
		double TP = 0, FP = 0, FN = 0;
		
		for ( int i=0; i<allLines.size(); i++ ) {
			sb.append(allEntPairs[i][0] + "\t" + allEntPairs[i][1] 
			             + allEntPairs[i][2] + "\t" + allEntPairs[i][3] + "\n" );
			
			if ( allEntPairs[i][2].equals("1") && allEntPairs[i][3].equals("0.0") )				
				FP += 1;
			else if ( allEntPairs[i][2].equals("1") && allEntPairs[i][3].equals("1.0") )				
				TP += 1;
			else if ( allEntPairs[i][2].equals("0") && allEntPairs[i][3].equals("0.0") )				
				FN += 1;			
		}
		
		FileUtility.writeInFile("merged_predictions.out", sb.toString(), false);
		
		System.out.println("TP: " + TP + "\n" + "FP: " + FP + "\n" + "FN: " + FN);
		
		double recall = TextUtility.roundTwoDecimals(TP*100/(TP+FN)), precision = TextUtility.roundTwoDecimals(TP*100/(TP+FP));
			System.out.println("P: " + precision);
			System.out.println("R: " + recall);
			System.out.println("F: " + TextUtility.roundTwoDecimals(2*precision*recall/(precision+recall)));
			
	}
	
}
