package Utility;

import java.util.ArrayList;

public class Common {
	
	public static boolean isIncludeWord = false, isIncludePOS = false, isIncludeRelName = true,
	isIncludeLemma = true, isIncludePOSGeneral = false, isIncludePharasalCat = false,
	isSimplifyEntity = true, isTrucEtAl2009Format = false;
	
	public final static String DEFAULT_ENT_TYPE = "NOMI";

	public static String[][] separateTokenAndPos( String tokenWithPos, boolean isNormalizeBrackets ){
		
		String[] tmpList = isNormalizeBrackets == true ? tokenWithPos.replaceAll("-LRB-", "(")
			.replaceAll("-RRB-", ")").replaceAll("-LSB-", "[").replaceAll("-RSB-", "]").split("\\s+") : tokenWithPos.split("\\s+");
		
		ArrayList<String> list = new ArrayList<String>();
		int k = 0;
		
		for ( int i=0; i<tmpList.length; i++ ){
			//-- if a token is found without having a pos tag, e.g. ..... of/IN 7 1\/2/CD ..... here, 7 does not have pos
			//-- also,  ..... patients/NNS aged/VBN <or=10 years and patients aged >/CD 10/CD years/NNS .....
			if ( i > 0 && !tmpList[i-1].contains("/") )
				list.set(k-1, list.get(k-1) + " " + tmpList[i]);
			else {
				list.add(tmpList[i]);
				k++;
			}			
		}
		
		String[][] wordAndPos = new String[list.size()][2];
		for ( int i=0; i<list.size(); i++ ){
			String str = list.get(i); 
			k = str.lastIndexOf("/");
			if ( k == str.length() -1 ){
				k--;
				while ( !String.valueOf(str.charAt(k)).equals("/") )
					k--;
			}

			wordAndPos[i] = new String[]{ str.substring(0, k), str.substring(k+1) };
			
			if ( wordAndPos[i][0].equals("\\*") )
				wordAndPos[i][0] = "*";
			
			while ( wordAndPos[i][0].contains("\\/") )
				wordAndPos[i][0] = wordAndPos[i][0].replace("\\/", "/");
		}
			 
		return wordAndPos;
	}
	
	
	public static ArrayList<ArrayList<String>> listOfPhrasalCatOfTokens = new ArrayList<ArrayList<String>>();


	/**
	 * 
	 * @throws Exception
	 */
	public void readTokenPhrasalCategory() throws Exception{
		String chunkFileName = "/media/Study/data/AImed/aimed_parsed_chunked",
			parsedFileName = "/media/Study/data/AImed/aimed_parsed_corrected";
		
		ArrayList<ArrayList<String>> listOfAllInput = FileUtility.readAllMultiLineInputs(chunkFileName);
		ArrayList<ArrayList<String>> listOfAllParsedWithDep = FileUtility.readAllMultiLineInputs(parsedFileName);
		ArrayList<ArrayList<String>> listOfAllParsed = new ArrayList<ArrayList<String>>();
		
		for ( int i=0; i<listOfAllParsedWithDep.size(); i++ ){
			if ( listOfAllParsedWithDep.get(i).size() > 0 && !listOfAllParsedWithDep.get(i).get(0).contains("(") )
				listOfAllParsed.add(listOfAllParsedWithDep.get(i));	
		}
		
		
		ArrayList<String> tempList = new ArrayList<String>();
		int sIndex = 0;
		for ( int i=0; i<listOfAllInput.size(); i++ ){
			
			for ( int k=0; k<listOfAllInput.get(i).size(); k++ ){
				String[] eles = listOfAllInput.get(i).get(k).trim().split("\\s+");
				tempList.add(eles[3]);
			}
	
			if ( listOfAllParsed.get(sIndex).get(0).trim().replaceAll("  ", " ").split("\\s+").length == tempList.size() ){
			
				listOfPhrasalCatOfTokens.add(tempList);
				tempList = new ArrayList<String>();
				sIndex++;
			}
		}
		
	}
	
	
	
	/**
	 * 
	 * @param entityName
	 * @param boundary
	 * @return
	 */
	public static ArrayList<Integer> findEntityWordIndexes ( int[] boundary,
			ArrayList<int[]> listOfBoundariesByWordIndexes ){
	
		ArrayList<Integer> listOfIndexesOfEntityWords = new ArrayList<Integer>();

		for ( int i=0; i<listOfBoundariesByWordIndexes.size(); i++ ){
			
			if ( TextUtility.hasOverlap(listOfBoundariesByWordIndexes.get(i), boundary) )
				listOfIndexesOfEntityWords.add(i);
		}

		return listOfIndexesOfEntityWords;
	}

	/**
	 * 
	 * @param boundary
	 * @param listOfBoundariesByWordIndexes
	 * @return
	 */
	public static ArrayList<Integer> findEntityWordIndexes ( int[] boundary,
			int[][] listOfBoundariesByWordIndexes ){

		ArrayList<Integer> listOfIndexesOfEntityWords = new ArrayList<Integer>();

		for ( int i=0; i<listOfBoundariesByWordIndexes.length; i++ ){
			
			if ( TextUtility.hasOverlap(listOfBoundariesByWordIndexes[i], boundary) )
				listOfIndexesOfEntityWords.add(i);
		}

		return listOfIndexesOfEntityWords;
	}


	/**
	 * 
	 * @param origSenWithOutSpace
	 * @param origWord
	 * @param prevToks
	 * @param nextTok
	 * @return
	 */
	public static String fixUnmatchedToken ( String origSenWithOutSpace, String origWord, String prevToks, String nextTok ){
		
		String pattern = TextUtility.normalizeDangelingCaharactersInRegExp(prevToks 
				+ (origWord.length()>1 ? origWord.charAt(0) :"")) 
				//+ ".*";
				//-- the following line assumes that the length of the unmatched token has maximum 2 characters variation than the original token
				+ ".{" + (origWord.length()-1) + "," + origWord.length() + "}";
		pattern = pattern + TextUtility.normalizeDangelingCaharactersInRegExp(nextTok);
		ArrayList<String> matchedTokens = TextUtility.returnMatchedString(origSenWithOutSpace, pattern);
	
		if ( matchedTokens.size() > 0 ){
			
			origWord = matchedTokens.get(0).substring(prevToks.length());
			pattern = ".*" + TextUtility.normalizeDangelingCaharactersInRegExp(nextTok);
		
			while( matchedTokens.size() > 0 ){
				int ntl = nextTok.length();
				if ( ntl < 1 )
					break;
				
				origWord = origWord.substring(0, origWord.length() - ntl);
				matchedTokens = TextUtility.returnMatchedString(origWord, pattern);	
			}
		}

		return origWord;
	}
	
	
	/**
	 * 
	 * @param tokenWithPos
	 * @param origSen
	 * @return
	 */
	public static String[][] checkTokensInOriginalSentence ( String tokenWithPos, String origSen ) {
		
		String[][] wordAndPos = Common.separateTokenAndPos(tokenWithPos, true);
		
		return checkTokensInOriginalSentence(wordAndPos, origSen);
	}
	
	/**
	 * NOTE: no token is deleted or added in this method. Only spelling is checked.
	 * 
	 * @param wordAndPos
	 * @param origSen
	 * @return
	 */
	public static String[][] checkTokensInOriginalSentence ( String[][] wordAndPos, String origSen ) {
		for ( int i=0; i<wordAndPos.length; i++ )
			 wordAndPos[i][0] = wordAndPos[i][0].replaceAll("\\s+", "").replaceAll("\\\\/", "/")
			.replaceAll("``", "\"").replaceAll("''", "\"");
		
		String origSenWithOutSpace = origSen.replaceAll("\\s+", "");
		
		for ( int i=0; i<wordAndPos.length; i++ ){
			
			//-- Checking whether spelling of the original word is changed by the parser
			String prevToks = "";
			if ( i-2 > -1 )
				prevToks = wordAndPos[i-2][0];
			else
				prevToks =  "";
			
			if ( i-1 > -1 )
				prevToks += wordAndPos[i-1][0];
			else
				prevToks +=  "";
										
			if ( !origSenWithOutSpace.contains(prevToks + wordAndPos[i][0]) ){				
				 String tmp = Common.fixUnmatchedToken(origSenWithOutSpace, wordAndPos[i][0], prevToks, 
						(i+1 < wordAndPos.length ? wordAndPos[i+1][0] : "")).trim();
				 
				 if ( !tmp.isEmpty() )
					 wordAndPos[i][0] = tmp;
			}
		}
		
		return wordAndPos;
	}
	
	/**
	 * 
	 * @param listClauseBound
	 * @return
	 */
	public ArrayList<String> separateSenIDsFromClauseBound( ArrayList<String[]> listClauseBound ){
		ArrayList<String> listSenIDs = new ArrayList<String>();
		
		for ( int i=0; i<listClauseBound.size(); i++ )
			listSenIDs.add(listClauseBound.get(i)[0]);
		
		return listSenIDs;
	}
	
	
	public int[][] separateClauseBoundFromSenIDs( ArrayList<String[]> listClauseBound ){
		int[][] arrClauseBoundOfSen = new int[listClauseBound.size()][];
		
		for ( int i=0; i<listClauseBound.size(); i++ ){
			arrClauseBoundOfSen[i] = new int[listClauseBound.get(i).length-1];
			
			for ( int k=0; k<arrClauseBoundOfSen[i].length; k++ ) 
				arrClauseBoundOfSen[i][k] = Integer.valueOf(listClauseBound.get(i)[k+1]);
		}
		
		return arrClauseBoundOfSen;
	}
	
	

	
	public static String[][] arrPosToGeneralPos = new String[][]{
			{"conj", "CC", "Coordinating conjunction"},
			{"", "CD", "Cardinal number"},
			{"", "DT", "Determiner"},
			{"", "EX", "Existential there"},
			{"", "FW", "Foreign word"},
			{"prep", "IN", "Preposition or subordinating conjunction"},
			{"adj", "JJ", "Adjective"},
			{"adj", "JJR", "Adjective, comparative"},
			{"adj", "JJS", "Adjective, superlative"},
			{"", "LS", "List item marker"},
			{"", "MD", "Modal"},
			{"noun", "NN", "Noun, singular or mass"},
			{"noun", "NNS", "Noun, plural"},
			{"noun", "NNP", "Proper noun, singular"},
			{"noun", "NNPS", "Proper noun, plural"},
			{"", "PDT", "Predeterminer"},
			{"", "POS", "Possessive ending"},
			{"", "PRP", "Personal pronoun"},
			{"", "PRP$", "Possessive pronoun"},
			{"adverb", "RB", "Adverb"},
			{"adverb", "RBR", "Adverb, comparative"},
			{"adverb", "RBS", "Adverb, superlative"},
			{"adverb", "RP", "Particle"},
			{"", "SYM", "Symbol"},
			{"prep", "TO", "to"},
			{"", "UH", "Interjection"},
			{"verb", "VB", "Verb, base form"},
			{"verb", "VBD", "Verb, past tense"},
			{"verb", "VBG", "Verb, gerund or present participle"},
			{"verb", "VBN", "Verb, past participle"},
			{"verb", "VBP", "Verb, non-3rd person singular present"},
			{"verb", "VBZ", "Verb, 3rd person singular present"},
			{"", "WDT", "Wh-determiner"},
			{"", "WP", "Wh-pronoun"},
			{"", "WP$", "Possessive wh-pronoun"},
			{"", "WRB", "Wh-adverb"}
	};
}
